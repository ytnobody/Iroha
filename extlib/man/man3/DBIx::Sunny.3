.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Sunny 3"
.TH DBIx::Sunny 3 "2011-11-24" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Sunny \- Simple DBI wrapper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use DBIx::Sunny;
\&
\&    my $dbh = DBIx::Sunny\->connect(...);
\&
\&    # or 
\&
\&    use DBI;
\&
\&    my $dbh = DBI\->connect(.., {
\&        RootClass => \*(AqDBIx::Sunny\*(Aq,
\&        PrintError => 0,
\&        RaiseError => 1,
\&    });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Sunny is a simple \s-1DBI\s0 wrapper. It provides better usability for you. This module based on Amon2::DBI.
DBIx::Sunny supports only SQLite and MySQL.
.SH "FEATURES"
.IX Header "FEATURES"
.IP "Set AutoInactiveDestroy to true." 4
.IX Item "Set AutoInactiveDestroy to true."
DBIx::Sunny set AutoInactiveDestroy as true.
.IP "Set sqlite_unicode and mysql_enable_utf8 automatically" 4
.IX Item "Set sqlite_unicode and mysql_enable_utf8 automatically"
DBIx::Sunny set sqlite_unicode and mysql_enable_utf8 automatically.
.IP "Set sqlite_use_immediate_transaction" 4
.IX Item "Set sqlite_use_immediate_transaction"
DBIx::Sunny set sqlite_use_immediate_transaction to true.
.IP "Nested transaction management." 4
.IX Item "Nested transaction management."
DBIx::Sunny supports nested transaction management based on \s-1RAII\s0 like DBIx::Class or DBIx::Skinny. It uses DBIx::TransactionManager internally.
.IP "Error Handling" 4
.IX Item "Error Handling"
DBIx::Sunny set RaiseError and ShowErrorStatement as true. DBIx::Sunny raises exception and shows current statement if your \f(CW$dbh\fR occurred exception.
.IP "\s-1SQL\s0 comment" 4
.IX Item "SQL comment"
DBIx::Sunny adds file name and line number as \s-1SQL\s0 comment that invokes \s-1SQL\s0 statement.
.IP "Easy access to last_insert_id" 4
.IX Item "Easy access to last_insert_id"
DBIx::Sunny's last_insert_id needs no arguments. It's shortcut for mysql_insertid or last_insert_rowid.
.IP "Auto expanding arrayref bind parameters" 4
.IX Item "Auto expanding arrayref bind parameters"
select_(one|row|all) and  query methods support auto-expanding arrayref bind parameters.
.Sp
.Vb 3
\&  $dbh\->select_all(\*(AqSELECT * FROM id IN (?)\*(Aq, [1 2 3])
\&  #SQL: \*(AqSELECT * FROM id IN (?,?,")\*(Aq
\&  #@BIND: (1, 2, 3)
.Ve
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.ie n .IP "$col = $dbh\->select_one($query, @bind);" 4
.el .IP "\f(CW$col\fR = \f(CW$dbh\fR\->select_one($query, \f(CW@bind\fR);" 4
.IX Item "$col = $dbh->select_one($query, @bind);"
Shortcut for prepare, execute and fetchrow_arrayref\->[0]
.ie n .IP "$row = $dbh\->select_row($query, @bind);" 4
.el .IP "\f(CW$row\fR = \f(CW$dbh\fR\->select_row($query, \f(CW@bind\fR);" 4
.IX Item "$row = $dbh->select_row($query, @bind);"
Shortcut for prepare, execute and fetchrow_hashref
.ie n .IP "$rows = $dbh\->select_all($query, @bind);" 4
.el .IP "\f(CW$rows\fR = \f(CW$dbh\fR\->select_all($query, \f(CW@bind\fR);" 4
.IX Item "$rows = $dbh->select_all($query, @bind);"
Shortcut for prepare, execute and selectall_arrayref(.., { Slice => {} }, ..)
.ie n .IP "$dbh\->query($query, @bind);" 4
.el .IP "\f(CW$dbh\fR\->query($query, \f(CW@bind\fR);" 4
.IX Item "$dbh->query($query, @bind);"
Shortcut for prepare, execute.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo {at} gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1DBI\s0, Amon2::DBI
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Masahiro Nagano
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
