.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Sunny::Schema 3"
.TH DBIx::Sunny::Schema 3 "2011-10-15" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Sunny::Schema \- SQL Class Builder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyProj::Data::DB;
\&  
\&  use parent qw/DBIx::Sunny::Schema/;
\&  use Mouse::Util::TypeConstraints;
\&  
\&  subtype \*(AqUint\*(Aq
\&      => as \*(AqInt\*(Aq
\&      => where { $_ >= 0 };
\&  
\&  subtype \*(AqNatural\*(Aq
\&      => as \*(AqInt\*(Aq
\&      => where { $_ > 0 };
\&  
\&  enum \*(AqFlag\*(Aq => qw/1 0/;
\&  
\&  no Mouse::Util::TypeConstraints;
\&
\&  _\|_PACKAGE_\|_\->select_one(
\&      \*(Aqmax_id\*(Aq,
\&      \*(AqSELECT max(id) FROM member\*(Aq
\&  );
\&  
\&  _\|_PACKAGE_\|_\->select_row(
\&      \*(Aqmember\*(Aq,
\&      id => { isa => \*(AqNatural\*(Aq }
\&      \*(AqSELECT * FROM member WHERE id=?\*(Aq,
\&  );
\&  
\&  _\|_PACAKGE_\|_\->select_all(
\&      \*(Aqrecent_article\*(Aq,
\&      public => { isa => \*(AqFlag\*(Aq, default => 1 },
\&      offset => { isa => \*(AqUint\*(Aq, default => 0 },
\&      limit  => { isa => \*(AqUint\*(Aq, default => 10 },
\&      \*(AqSELECT * FROM articles WHERE public=? ORDER BY created_on LIMIT ?,?\*(Aq,
\&  );
\&
\&  _\|_PACAKGE_\|_\->select_all(
\&      \*(Aqrecent_article\*(Aq,
\&      id  => { isa => \*(AqArrayRef[Uint]\*(Aq },
\&      \*(AqSELECT * FROM articles WHERE id IN(?)\*(Aq,
\&  );
\&  # This method rewrites query like \*(Aqid IN (?,?..)\*(Aq with Array\*(Aqs value number
\&  
\&  _\|_PACKAGE_\|_\->query(
\&      \*(Aqadd_article\*(Aq,
\&      member_id => \*(AqNatural\*(Aq,
\&      flag => { isa => \*(AqFlag\*(Aq, default => \*(Aq1\*(Aq },
\&      subject => \*(AqStr\*(Aq,
\&      body => \*(AqStr\*(Aq,
\&      created_on => { isa => .. },
\&      <<SQL);
\&  INSERT INTO articles (member_id, public, subject, body, created_on) 
\&  VALUES ( ?, ?, ?, ?, ?)\*(Aq,
\&  SQL
\&  
\&  _\|_PACKAGE_\|_\->select_one(
\&      \*(Aqarticle_count_by_member\*(Aq,
\&      member_id => \*(AqNatural\*(Aq,
\&      \*(AqSELECT COUNT(*) FROM articles WHERE member_id = ?\*(Aq,
\&  );
\&  
\&  _\|_PACKAGE_\|_\->query(
\&      \*(Aqupdate_member_article_count\*(Aq,
\&      article_count => \*(AqUint\*(Aq,
\&      id => \*(AqNatural\*(Aq
\&      \*(AqUPDATE member SET article_count = ? WHERE id = ?\*(Aq,
\&  );
\&    
\&  ...
\&  
\&  package main;
\&  
\&  use MyProj::Data::DB;
\&  use DBIx::Sunny;
\&  
\&  my $dbh = DBIx::Sunny\->connect(...);
\&  my $db = MyProj::Data::DB\->new(dbh=>$dbh,readonly=>0);
\&  
\&  my $max = $db\->max_id;
\&  my $member_hashref = $db\->member(id=>100); 
\&  # my $member = $db\->member(id=>\*(Aqabc\*(Aq);  #validator error
\&  
\&  my $article_arrayref = $db\->recent_article( offset => 10 );
\&  
\&  {
\&      my $txn = $db\->dbh\->txn_scope;
\&      $db\->add_article(
\&          member_id => $id,
\&          subject => $subject,
\&          body => $body,
\&          created_on => 
\&      );
\&      my $last_insert_id = $db\->dbh\->last_insert_id;
\&      my $count = $db\->article_count_by_member( id => $id );
\&      $db\->update_member_article_count(
\&          article_count => $count,
\&          id => $id
\&      );
\&      $txn\->commit;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "BUILDER CLASS METHODS"
.IX Header "BUILDER CLASS METHODS"
.ie n .IP "_\|_PACKAGE_\|_\->select_one( $method_name, @validators, $sql );" 4
.el .IP "_\|_PACKAGE_\|_\->select_one( \f(CW$method_name\fR, \f(CW@validators\fR, \f(CW$sql\fR );" 4
.IX Item "__PACKAGE__->select_one( $method_name, @validators, $sql );"
build a select_one method named \f(CW$method_name\fR with validator. validators arguments are passed for Data::Validator. you can use Mouse's type constraint. Type constraint are also used for \s-1SQL\s0's bind type determination.
.ie n .IP "_\|_PACKAGE_\|_\->select_row( $method_name, @validators, $sql, [\e&filter] );" 4
.el .IP "_\|_PACKAGE_\|_\->select_row( \f(CW$method_name\fR, \f(CW@validators\fR, \f(CW$sql\fR, [\e&filter] );" 4
.IX Item "__PACKAGE__->select_row( $method_name, @validators, $sql, [&filter] );"
build a select_row method named \f(CW$method_name\fR with validator. If a last argument is CodeRef, this coderef will be applied for a result row.
.ie n .IP "_\|_PACKAGE_\|_\->select_all( $method_name, @validators, $sql, [\e&filter] );" 4
.el .IP "_\|_PACKAGE_\|_\->select_all( \f(CW$method_name\fR, \f(CW@validators\fR, \f(CW$sql\fR, [\e&filter] );" 4
.IX Item "__PACKAGE__->select_all( $method_name, @validators, $sql, [&filter] );"
build a select_all method named \f(CW$method_name\fR with validator. If a last argument is CodeRef, this coderef will be applied for all result row.
.ie n .IP "_\|_PACKAGE_\|_\->query( $method_name, @validators, $sql );" 4
.el .IP "_\|_PACKAGE_\|_\->query( \f(CW$method_name\fR, \f(CW@validators\fR, \f(CW$sql\fR );" 4
.IX Item "__PACKAGE__->query( $method_name, @validators, $sql );"
build a query method named \f(CW$method_name\fR with validator.
.SH "FILTERING and DEFLATING"
.IX Header "FILTERING and DEFLATING"
.IP "\s-1FILTERING\s0" 4
.IX Item "FILTERING"
If you passed CodeRef to builder, this CodeRef will be applied for results.
.Sp
.Vb 10
\&  _\|_PACAKGE_\|_\->select_all(
\&      \*(Aqrecent_article\*(Aq,
\&      limit  => { isa => \*(AqUint\*(Aq, default => 10 },
\&      \*(AqSELECT * FROM articles WHERE ORDER BY created_on LIMIT ?\*(Aq,
\&      sub {
\&          my ($row,$self)= @_;
\&          $row\->{created_on} = DateTime::Format::MySQL\->parse_datetime($row\->{created_on});
\&          $row\->{created_on}\->set_time_zone("Asia/Tokyo");
\&      }
\&  );
.Ve
.Sp
Second argument of filter CodeRef is instance object of your \s-1SQL\s0 class.
.IP "\s-1DEFLATING\s0" 4
.IX Item "DEFLATING"
If you want to deflate argument before execute \s-1SQL\s0, you can it with adding deflater argument to validator rule.
.Sp
.Vb 9
\&  _\|_PACKAGE_\|_\->query(
\&      \*(Aqadd_article\*(Aq,
\&      subject => \*(AqStr\*(Aq,
\&      body => \*(AqStr\*(Aq,
\&      created_on => { isa => \*(AqDateTime\*(Aq, deflater => sub { shift\->strftime(\*(Aq%Y\-%m\-%d %H:%M:%S\*(Aq)  },
\&      <<SQL);
\&  INSERT INTO articles (subject, body, created_on) 
\&  VALUES ( ?, ?, ?)\*(Aq,
\&  SQL
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new({ dbh => \s-1DBI\s0, readonly => \s-1ENUM\s0(0,1) ) :DBIx::Sunny::Schema" 4
.IX Item "new({ dbh => DBI, readonly => ENUM(0,1) ) :DBIx::Sunny::Schema"
create instance of schema. if readonly is true, query method's will raise exception.
.IP "dbh :DBI" 4
.IX Item "dbh :DBI"
readonly accessor for \s-1DBI\s0 database handler.
.ie n .IP "select_one($query, @bind) :Str" 4
.el .IP "select_one($query, \f(CW@bind\fR) :Str" 4
.IX Item "select_one($query, @bind) :Str"
Shortcut for prepare, execute and fetchrow_arrayref\->[0]
.ie n .IP "select_row($query, @bind) :HashRef" 4
.el .IP "select_row($query, \f(CW@bind\fR) :HashRef" 4
.IX Item "select_row($query, @bind) :HashRef"
Shortcut for prepare, execute and fetchrow_hashref
.ie n .IP "select_all($query, @bind) :ArrayRef[HashRef]" 4
.el .IP "select_all($query, \f(CW@bind\fR) :ArrayRef[HashRef]" 4
.IX Item "select_all($query, @bind) :ArrayRef[HashRef]"
Shortcut for prepare, execute and selectall_arrayref(.., { Slice => {} }, ..)
.ie n .IP "query($query, @bind) :Str" 4
.el .IP "query($query, \f(CW@bind\fR) :Str" 4
.IX Item "query($query, @bind) :Str"
Shortcut for prepare, execute.
.IP "\fItxn_scope()\fR :DBIx::TransactionManager::Guard" 4
.IX Item "txn_scope() :DBIx::TransactionManager::Guard"
return DBIx::TransactionManager::Guard object
.IP "do(@args) :Str" 4
.IX Item "do(@args) :Str"
Shortcut for \f(CW$self\fR\->dbh\->\fIdo()\fR
.IP "prepare(@args) :DBI::st" 4
.IX Item "prepare(@args) :DBI::st"
Shortcut for \f(CW$self\fR\->dbh\->\fIprepare()\fR
.IP "func(@args) :Str" 4
.IX Item "func(@args) :Str"
Shortcut for \f(CW$self\fR\->dbh\->\fIfunc()\fR
.IP "last_insert_id(@args) :Str" 4
.IX Item "last_insert_id(@args) :Str"
Shortcut for \f(CW$self\fR\->dbh\->\fIlast_insert_id()\fR
.IP "args(@rule) :HashRef" 4
.IX Item "args(@rule) :HashRef"
Shortcut for using Data::Validator. Optional deflater arguments can be used.
Data::Validator instance will cache at first time.
.Sp
.Vb 11
\&  sub retrieve_user {
\&      my $self = shift;
\&      my $args = $self\->args(
\&          id => \*(AqInt\*(Aq,
\&          created_on => {
\&              isa => \*(AqDateTime\*(Aq,
\&              deflater => sub { shift\->strftime(\*(Aq%Y\-%m\-%d %H:%M:%S\*(Aq)
\&          },
\&      );
\&      $arg\->{id} ...
\&  }
.Ve
.Sp
\&\f(CW$args\fR is validated arguments. \f(CW@_\fR is not needed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo {at} gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`DBI\*(C'\fR, \f(CW\*(C`DBIx::TransactionManager\*(C'\fR, \f(CW\*(C`Data::Validator\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
