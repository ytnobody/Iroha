.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mouse::Util::MetaRole 3"
.TH Mouse::Util::MetaRole 3 "2011-10-04" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mouse::Util::MetaRole \- Apply roles to any metaclass, as well as the object base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyApp::Mouse;
\&
\&  use Mouse ();
\&  use Mouse::Exporter;
\&  use Mouse::Util::MetaRole;
\&
\&  use MyApp::Role::Meta::Class;
\&  use MyApp::Role::Meta::Method::Constructor;
\&  use MyApp::Role::Object;
\&
\&  Mouse::Exporter\->setup_import_methods( also => \*(AqMouse\*(Aq );
\&
\&  sub init_meta {
\&      shift;
\&      my %args = @_;
\&
\&      Mouse\->init_meta(%args);
\&
\&      Mouse::Util::MetaRole::apply_metaroles(
\&          for             => $args{for_class},
\&          class_metaroles => {
\&              class       => [\*(AqMyApp::Role::Meta::Class\*(Aq],
\&              constructor => [\*(AqMyApp::Role::Meta::Method::Constructor\*(Aq],
\&          },
\&      );
\&
\&      Mouse::Util::MetaRole::apply_base_class_roles(
\&          for   => $args{for_class},
\&          roles => [\*(AqMyApp::Role::Object\*(Aq],
\&      );
\&
\&      return $args{for_class}\->meta();
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility module is designed to help authors of Mouse extensions
write extensions that are able to cooperate with other Mouse
extensions. To do this, you must write your extensions as roles, which
can then be dynamically applied to the caller's metaclasses.
.PP
This module makes sure to preserve any existing superclasses and roles
already set for the meta objects, which means that any number of
extensions can apply roles in any order.
.SH "USAGE"
.IX Header "USAGE"
\&\fBIt is very important that you only call this module's functions when
your module is imported by the caller\fR. The process of applying roles
to the metaclass reinitializes the metaclass object, which wipes out
any existing attributes already defined. However, as long as you do
this when your module is imported, the caller should not have any
attributes defined yet.
.PP
The easiest way to ensure that this happens is to use
Mouse::Exporter, which can generate the appropriate \f(CW\*(C`init_meta\*(C'\fR
method for you, and make sure it is called when imported.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module provides two functions.
.SS "apply_metaroles( ... )"
.IX Subsection "apply_metaroles( ... )"
This function will apply roles to one or more metaclasses for the
specified class. It accepts the following parameters:
.IP "\(bu" 4
for => \f(CW$name\fR
.Sp
This specifies the class or for which to alter the meta classes. This can be a
package name, or an appropriate meta-object (a Mouse::Meta::Class or
Mouse::Meta::Role).
.IP "\(bu" 4
class_metaroles => \e%roles
.Sp
This is a hash reference specifying which metaroles will be applied to the
class metaclass and its contained metaclasses and helper classes.
.Sp
Each key should in turn point to an array reference of role names.
.Sp
It accepts the following keys:
.RS 4
.IP "class" 8
.IX Item "class"
.PD 0
.IP "attribute" 8
.IX Item "attribute"
.IP "method" 8
.IX Item "method"
.IP "constructor" 8
.IX Item "constructor"
.IP "destructor" 8
.IX Item "destructor"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
role_metaroles => \e%roles
.Sp
This is a hash reference specifying which metaroles will be applied to the
role metaclass and its contained metaclasses and helper classes.
.Sp
It accepts the following keys:
.RS 4
.IP "role" 8
.IX Item "role"
.PD 0
.IP "method" 8
.IX Item "method"
.RE
.RS 4
.RE
.PD
.ie n .SS "apply_base_class_roles( for => $class, roles => \e@roles )"
.el .SS "apply_base_class_roles( for => \f(CW$class\fP, roles => \e@roles )"
.IX Subsection "apply_base_class_roles( for => $class, roles => @roles )"
This function will apply the specified roles to the object's base class.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose::Util::MetaRole
