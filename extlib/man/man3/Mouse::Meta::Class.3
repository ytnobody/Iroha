.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mouse::Meta::Class 3"
.TH Mouse::Meta::Class 3 "2011-10-10" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mouse::Meta::Class \- The Mouse class metaclass
.SH "VERSION"
.IX Header "VERSION"
This document describes Mouse version 0.97
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a meta object protocol for Mouse classes,
which is a subset of Moose::Meta:::Class.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """initialize(ClassName) \-> Mouse::Meta::Class"""
.el .SS "\f(CWinitialize(ClassName) \-> Mouse::Meta::Class\fP"
.IX Subsection "initialize(ClassName) -> Mouse::Meta::Class"
Finds or creates a \f(CW\*(C`Mouse::Meta::Class\*(C'\fR instance for the given ClassName. Only
one instance should exist for a given class.
.ie n .SS """name \-> ClassName"""
.el .SS "\f(CWname \-> ClassName\fP"
.IX Subsection "name -> ClassName"
Returns the name of the owner class.
.ie n .SS """superclasses \-> ClassNames"" ""superclass(ClassNames)"""
.el .SS "\f(CWsuperclasses \-> ClassNames\fP \f(CWsuperclass(ClassNames)\fP"
.IX Subsection "superclasses -> ClassNames superclass(ClassNames)"
Gets (or sets) the list of superclasses of the owner class.
.ie n .SS """add_method(name => CodeRef)"""
.el .SS "\f(CWadd_method(name => CodeRef)\fP"
.IX Subsection "add_method(name => CodeRef)"
Adds a method to the owner class.
.ie n .SS """has_method(name) \-> Bool"""
.el .SS "\f(CWhas_method(name) \-> Bool\fP"
.IX Subsection "has_method(name) -> Bool"
Returns whether we have a method with the given name.
.ie n .SS """get_method(name) \-> Mouse::Meta::Method | undef"""
.el .SS "\f(CWget_method(name) \-> Mouse::Meta::Method | undef\fP"
.IX Subsection "get_method(name) -> Mouse::Meta::Method | undef"
Returns a Mouse::Meta::Method with the given name.
.PP
Note that you can also use \f(CW\*(C`$metaclass\->name\->can($name)\*(C'\fR for a method body.
.ie n .SS """get_method_list \-> Names"""
.el .SS "\f(CWget_method_list \-> Names\fP"
.IX Subsection "get_method_list -> Names"
Returns a list of method names which are defined in the local class.
If you want a list of all applicable methods for a class, use the
\&\f(CW\*(C`get_all_methods\*(C'\fR method.
.ie n .SS """get_all_methods \-> (Mouse::Meta::Method)"""
.el .SS "\f(CWget_all_methods \-> (Mouse::Meta::Method)\fP"
.IX Subsection "get_all_methods -> (Mouse::Meta::Method)"
Return the list of all Mouse::Meta::Method instances associated with
the class and its superclasses.
.ie n .SS """add_attribute(name => spec | Mouse::Meta::Attribute)"""
.el .SS "\f(CWadd_attribute(name => spec | Mouse::Meta::Attribute)\fP"
.IX Subsection "add_attribute(name => spec | Mouse::Meta::Attribute)"
Begins keeping track of the existing Mouse::Meta::Attribute for the owner
class.
.ie n .SS """has_attribute(Name) \-> Bool"""
.el .SS "\f(CWhas_attribute(Name) \-> Bool\fP"
.IX Subsection "has_attribute(Name) -> Bool"
Returns whether we have a Mouse::Meta::Attribute with the given name.
.ie n .SS """get_attribute Name \-> Mouse::Meta::Attribute | undef"""
.el .SS "\f(CWget_attribute Name \-> Mouse::Meta::Attribute | undef\fP"
.IX Subsection "get_attribute Name -> Mouse::Meta::Attribute | undef"
Returns the Mouse::Meta::Attribute with the given name.
.ie n .SS """get_attribute_list \-> Names"""
.el .SS "\f(CWget_attribute_list \-> Names\fP"
.IX Subsection "get_attribute_list -> Names"
Returns a list of attribute names which are defined in the local
class. If you want a list of all applicable attributes for a class,
use the \f(CW\*(C`get_all_attributes\*(C'\fR method.
.ie n .SS """get_all_attributes \-> (Mouse::Meta::Attribute)"""
.el .SS "\f(CWget_all_attributes \-> (Mouse::Meta::Attribute)\fP"
.IX Subsection "get_all_attributes -> (Mouse::Meta::Attribute)"
Returns the list of all Mouse::Meta::Attribute instances associated with
this class and its superclasses.
.ie n .SS """linearized_isa \-> [ClassNames]"""
.el .SS "\f(CWlinearized_isa \-> [ClassNames]\fP"
.IX Subsection "linearized_isa -> [ClassNames]"
Returns the list of classes in method dispatch order, with duplicates removed.
.ie n .SS """new_object(Parameters) \-> Instance"""
.el .SS "\f(CWnew_object(Parameters) \-> Instance\fP"
.IX Subsection "new_object(Parameters) -> Instance"
Creates a new instance.
.ie n .SS """clone_object(Instance, Parameters) \-> Instance"""
.el .SS "\f(CWclone_object(Instance, Parameters) \-> Instance\fP"
.IX Subsection "clone_object(Instance, Parameters) -> Instance"
Clones the given instance which must be an instance governed by this
metaclass.
.ie n .SS """throw_error(Message, Parameters)"""
.el .SS "\f(CWthrow_error(Message, Parameters)\fP"
.IX Subsection "throw_error(Message, Parameters)"
Throws an error with the given message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mouse::Meta::Module
.PP
Moose::Meta::Class
.PP
Class::MOP::Class
