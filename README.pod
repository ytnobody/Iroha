=encoding utf8

=head1 NAME

Iroha - Schema-less ORM

=head1 SYNOPSIS

  use Iroha;
  use utf8;
  
  # Connect to database
  my $c = Iroha->connect( 'dbi:...', 'user', 'pass' );
  
  # Insert into member table
  my $row = $c->insert( member => { name => 'おれおれ', ... } );
  
  # Select rows from member table
  my @rows = $c->search( member => { area => '日本', ... }, { limit => 3 } );
  
  # Fetch a row with id=3 from member table 
  my $row = $c->fetch( member => 3 );
  
  # Update member's name and age
  $row->update( name => '源義経', age => 17 );
  # Ah, mistake...
  $row->age( 19 );
  
  # Get values from fields
  my ( $name, $age ) = $row->cols( qw( name age ) );
  # or 
  my $name = $row->name;
  my $age = $row->age;
  
  # Synchronize fields from database
  $row->pull;
  
  # Delete member
  $row->delete;

=head1 DESCRIPTION

Iroha is schema-less Object-Relational-Mapper.

=head1 ONLY ONE CONSTRAINT

Name of primary key on your table must be 'id'.

=head1 METHODS

=head2 connect

Connect to database with specified arguments.

 my $iroha = Iroha->connect( $dsn, $user, $password, \%options );

=head2 insert

Insert into specified table with specified arguments.

 my $row = $iroha->insert( $table => $hashref );

If you specified 'id' key in $hashref, it work like as REPLACE.

=head2 fetch 

Fetch a row from specified table with specified identification-key.

 my $row = $iroha->fetch( $table => $id );

=head2 search

Search rows from specified table with specified conditions.

 my @rows = $iroha->search( $table => \%where, \%options );

=head2 query

Prepare and execute in simple method.

 my $is_success = $iroha->query( $sql, @binds );

=head2 dbh

Returns DBH.

 my $dbh = $iroha->dbh;

=head2 transaction

Implementation of transaction as DSL-like.

  my $is_success = $iroha->transaction( sub {
      my $akagi = insert( member => { name => 'Akagi', age => 26, datein => time } ) or rollback();
      my $hirayama = insert( member => { name => 'Hirayama', age => 25, datein => time } ) or rollback();
      $hirayama->name( 'Akagi' );
      if ( $akagi->name eq $hirayama->name ) {
          rollback();
      }
  } );

You may use insert(), fetch(), search(), query() and dbh() as like as simple function in callback.

=head1 AUTHOR

satoshi azuma E<lt>ytnobody at gmail dot comE<gt>

=head1 SEE ALSO

Iroha::Row

DBIx::Sunny

SQL::Maker

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
